Linear Search Algorithm:

Input:
• An array A[0..n-1] of n elements
• A value key to search
Output:
• The index (position) of key if found
• Otherwise, return -1

Steps:
1. Start from the first element (index 0).
2. Compare A[i] with key.
3. If A[i] == key, then return i (element found).
4. Otherwise, move to the next element (i = i + 1).
5. Repeat steps 2–4 until the end of the array is reached.
6. If no element matches key, return -1 (element not found).

Pseudo-code:
LinearSearch(A, n, key):
for i ← 0 to n-1 do
if A[i] = key then
return i
return -1

Linear Search Code:
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
// Linear search function
int linearSearch(int arr[], int n, int key) {
for (int i = 0; i < n; i++) {

if (arr[i] == key)
return i;
}
return -1;
}
int main() {
int n, key, pos;
clock_t start, end;
double cpu_time;
// Different values of n
int sizes[] = {1000, 5000, 10000, 20000, 50000, 100000};
int num_sizes = sizeof(sizes) / sizeof(sizes[0]);
printf("n,TimeTaken(seconds)\n");
for (int s = 0; s < num_sizes; s++) {
n = sizes[s];
int *arr = (int *)malloc(n * sizeof(int));
for (int i = 0; i < n; i++)
arr[i] = rand();
key = arr[n - 1]; // worst case
start = clock();
pos = linearSearch(arr, n, key);
end = clock();
cpu_time = ((double)(end - start)) / CLOCKS_PER_SEC;
printf("%d,%.8f\n", n, cpu_time);
free(arr);
}
return 0;
}
